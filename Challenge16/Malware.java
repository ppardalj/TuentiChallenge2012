/*
 * Tuenti Programming Challenge 2
 * Challenge 16: Malware Detectors
 * 
 * Author: Pedro Antonio Pardal Jimena
 *         ppardalj@gmail.com
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class Malware {

	private static List<Integer> readVector(Scanner sc, int n) {
		List<Integer> v = new ArrayList<Integer>(n);
		for (int i = 0; i < n; i++) {
			v.add(sc.nextInt());
		}
		return v;
	}

	private static int[] toArray(List<Integer> list) {
		int[] v = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			v[i] = list.get(i);
		}
		return v;
	}

	private static double gaussian(int x, double m, double s) {
		return (1 / (s * Math.pow(2 * Math.PI, 2.0)))
				* Math.exp(-0.5 * Math.pow((x - m) / s, 2));
	}

	private static double prob(int[] v, double prio, double[] mean,
			double stddev[]) {
		double prob = prio;
		for (int i = 0; i < v.length; i++) {
			prob = prob * gaussian(v[i], mean[i], stddev[i]);
		}
		return prob;
	}

	private static double[] stddev(List<List<Integer>> vss, double[] ms, int n) {
		double[] ss = new double[n];
		for (int i = 0; i < n; i++) {
			double s = 0.0;
			for (int j = 0; j < vss.size(); j++) {
				s += Math.pow(vss.get(j).get(i) - ms[i], 2);
			}
			s = Math.sqrt(s / (vss.size() - 1));
			ss[i] = s;
		}
		return ss;
	}

	private static double[] means(List<List<Integer>> vss, int n) {
		double[] ms = new double[n];
		for (int i = 0; i < n; i++) {
			double m = 0.0;
			for (int j = 0; j < vss.size(); j++) {
				m += vss.get(j).get(i);
			}
			m = m / vss.size();
			ms[i] = m;
		}
		return ms;
	}

	private static int sum(int[] v) {
		int sum = 0;
		for (int i = 0; i < v.length; i++) {
			sum += v[i];
		}
		return sum;
	}

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		int r = sc.nextInt();
		int u = sc.nextInt();
		int n = sc.nextInt();

		List<List<Integer>> vSafe = new LinkedList<List<Integer>>();
		List<List<Integer>> vMalw = new LinkedList<List<Integer>>();
		for (int i = 0; i < r; i++) {
			sc.nextLine();
			String type = sc.next();
			List<Integer> v = readVector(sc, n);
			if (type.equals("S")) {
				vSafe.add(v);
			} else if (type.equals("M")) {
				vMalw.add(v);
			}
		}
		double prioSafe = (double) vSafe.size() / n;
		double prioMalw = (double) vMalw.size() / n;
		double[] mSafe = means(vSafe, n);
		double[] mMalw = means(vMalw, n);
		double[] sSafe = stddev(vSafe, mSafe, n);
		double[] sMalw = stddev(vMalw, mMalw, n);

		int out = 0;
		for (int i = 0; i < u; i++) {
			sc.nextLine();
			int[] v = toArray(readVector(sc, n));
			double pSafe = prob(v, prioSafe, mSafe, sSafe);
			double pMalw = prob(v, prioMalw, mMalw, sMalw);
			if (pMalw > pSafe) {
				out += sum(v);
			}
		}
		System.out.println(out);
	}
}
